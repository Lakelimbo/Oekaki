/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/Users/register': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['RegisterRequest'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Bad Request */
				400: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/problem+json': components['schemas']['HttpValidationProblemDetails'];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/login': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: {
					useCookies?: boolean;
					useSessionCookies?: boolean;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['LoginRequest'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['AccessTokenResponse'];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/refresh': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['RefreshRequest'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['AccessTokenResponse'];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/confirmEmail': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['MapIdentityApi-/Users/confirmEmail'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/resendConfirmationEmail': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['ResendConfirmationEmailRequest'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/forgotPassword': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['ForgotPasswordRequest'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Bad Request */
				400: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/problem+json': components['schemas']['HttpValidationProblemDetails'];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/resetPassword': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['ResetPasswordRequest'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Bad Request */
				400: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/problem+json': components['schemas']['HttpValidationProblemDetails'];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/manage/2fa': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['TwoFactorRequest'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['TwoFactorResponse'];
					};
				};
				/** @description Bad Request */
				400: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/problem+json': components['schemas']['HttpValidationProblemDetails'];
					};
				};
				/** @description Not Found */
				404: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/manage/info': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['InfoResponse'];
					};
				};
				/** @description Bad Request */
				400: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/problem+json': components['schemas']['HttpValidationProblemDetails'];
					};
				};
				/** @description Not Found */
				404: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['InfoRequest'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['InfoResponse'];
					};
				};
				/** @description Bad Request */
				400: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/problem+json': components['schemas']['HttpValidationProblemDetails'];
					};
				};
				/** @description Not Found */
				404: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Tests': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['Test'][];
						'application/json': components['schemas']['Test'][];
						'text/json': components['schemas']['Test'][];
					};
				};
			};
		};
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['Test'];
					'text/json': components['schemas']['Test'];
					'application/*+json': components['schemas']['Test'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['Test'];
						'application/json': components['schemas']['Test'];
						'text/json': components['schemas']['Test'];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Tests/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['Test'];
						'application/json': components['schemas']['Test'];
						'text/json': components['schemas']['Test'];
					};
				};
			};
		};
		put: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					id: number;
				};
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['Test'];
					'text/json': components['schemas']['Test'];
					'application/*+json': components['schemas']['Test'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		post?: never;
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					id: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/signup': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': components['schemas']['Register'];
					'text/json': components['schemas']['Register'];
					'application/*+json': components['schemas']['Register'];
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['UserDto'];
						'application/json': components['schemas']['UserDto'];
						'text/json': components['schemas']['UserDto'];
					};
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['UserDto'][];
						'application/json': components['schemas']['UserDto'][];
						'text/json': components['schemas']['UserDto'][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					id: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['UserDto'];
						'application/json': components['schemas']['UserDto'];
						'text/json': components['schemas']['UserDto'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/me': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['UserProtectedDto'];
						'application/json': components['schemas']['UserProtectedDto'];
						'text/json': components['schemas']['UserProtectedDto'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/Users/logout': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: {
				content: {
					'application/json': unknown;
					'text/json': unknown;
					'application/*+json': unknown;
				};
			};
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/WeatherForecast': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['GetWeatherForecast'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		AccessTokenResponse: {
			readonly tokenType?: string | null;
			accessToken: string | null;
			/** Format: int64 */
			expiresIn: number;
			refreshToken: string | null;
		};
		ForgotPasswordRequest: {
			email: string | null;
		};
		HttpValidationProblemDetails: {
			type?: string | null;
			title?: string | null;
			/** Format: int32 */
			status?: number | null;
			detail?: string | null;
			instance?: string | null;
			errors?: {
				[key: string]: string[];
			} | null;
		} & {
			[key: string]: unknown;
		};
		InfoRequest: {
			newEmail?: string | null;
			newPassword?: string | null;
			oldPassword?: string | null;
		};
		InfoResponse: {
			email: string | null;
			isEmailConfirmed: boolean;
		};
		LoginRequest: {
			email: string | null;
			password: string | null;
			twoFactorCode?: string | null;
			twoFactorRecoveryCode?: string | null;
		};
		RefreshRequest: {
			refreshToken: string | null;
		};
		Register: {
			userName: string;
			/** Format: email */
			email: string;
			/** Format: password */
			password: string;
			/** Format: password */
			passwordConfirm: string;
			nickname: string;
		};
		RegisterRequest: {
			email: string | null;
			password: string | null;
		};
		ResendConfirmationEmailRequest: {
			email: string | null;
		};
		ResetPasswordRequest: {
			email: string | null;
			resetCode: string | null;
			newPassword: string | null;
		};
		Test: {
			/** Format: int32 */
			id?: number;
			title: string;
			description: string;
			completed?: boolean;
		};
		TwoFactorRequest: {
			enable?: boolean | null;
			twoFactorCode?: string | null;
			resetSharedKey?: boolean;
			resetRecoveryCodes?: boolean;
			forgetMachine?: boolean;
		};
		TwoFactorResponse: {
			sharedKey: string | null;
			/** Format: int32 */
			recoveryCodesLeft: number;
			recoveryCodes?: string[] | null;
			isTwoFactorEnabled: boolean;
			isMachineRemembered: boolean;
		};
		UserDto: {
			id?: string | null;
			userName?: string | null;
			email?: string | null;
			nickname?: string | null;
			uriSlug?: string | null;
		};
		UserProtectedDto: {
			id?: string | null;
			userName?: string | null;
			email?: string | null;
			nickname?: string | null;
			uriSlug?: string | null;
		};
		WeatherForecast: {
			/** Format: date */
			date?: string;
			/** Format: int32 */
			temperatureC?: number;
			/** Format: int32 */
			readonly temperatureF?: number;
			summary?: string | null;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	'MapIdentityApi-/Users/confirmEmail': {
		parameters: {
			query?: {
				userId?: string;
				code?: string;
				changedEmail?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	GetWeatherForecast: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'text/plain': components['schemas']['WeatherForecast'][];
					'application/json': components['schemas']['WeatherForecast'][];
					'text/json': components['schemas']['WeatherForecast'][];
				};
			};
		};
	};
}
